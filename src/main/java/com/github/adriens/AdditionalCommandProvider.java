package com.github.adriens;


import schemacrawler.schemacrawler.SchemaCrawlerOptions;
import schemacrawler.tools.executable.BaseCommandProvider;
import schemacrawler.tools.executable.CommandDescription;
import schemacrawler.tools.executable.SchemaCrawlerCommand;
import schemacrawler.tools.executable.commandline.PluginCommand;
import schemacrawler.tools.options.Config;
import schemacrawler.tools.options.OutputOptions;

import java.util.AbstractMap;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * SchemaCrawler command plug-in.
 *
 * @see <a href="https://www.schemacrawler.com">SchemaCrawler</a>
 *
 * @author Automatically generated by SchemaCrawler 16.9.4
 */
public class AdditionalCommandProvider extends BaseCommandProvider
{

  public static final String DESCRIPTION_HEADER = "An additional command for schemacrawler to dump lints as csv files.";

  public AdditionalCommandProvider(){
    super(new CommandDescription(AdditionalCommand.COMMAND, DESCRIPTION_HEADER));
  }

  @Override
  public SchemaCrawlerCommand newSchemaCrawlerCommand(final String command, final Config config) {
    if (!AdditionalCommand.COMMAND.equals(command))
    {
      throw new IllegalArgumentException("Cannot support command, " + command);
    }

    final Map<String, String> properties =
            config
                    .entrySet()
                    .stream()
                    .map(
                            entry ->
                                    new AbstractMap.SimpleImmutableEntry<String, String>(
                                            entry.getKey(), String.valueOf(entry.getValue())))
                    .filter(entry -> entry.getValue() != null)
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

    final AdditionalOptions additionalOptions =
            AdditionalOptionsBuilder.builder().fromConfig(config).withProperties(properties).toOptions();
    final AdditionalCommand scCommand = new AdditionalCommand();
    scCommand.setCommandOptions(additionalOptions);
    return scCommand;
  }

  @Override
  public boolean supportsSchemaCrawlerCommand(String s, SchemaCrawlerOptions schemaCrawlerOptions, Config config, OutputOptions outputOptions) {
    return AdditionalCommand.COMMAND.equals(s);
  }

  @Override
  public boolean supportsOutputFormat(String s, OutputOptions outputOptions) {
    return true;
  }

  @Override
  public PluginCommand getCommandLineCommand() {
    return PluginCommand.empty();
  }


}
